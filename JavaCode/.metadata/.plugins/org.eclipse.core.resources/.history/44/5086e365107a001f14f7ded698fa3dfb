package cs523.bitcoinprice.consumer;

import com.google.gson.Gson;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka010.ConsumerStrategies;
import org.apache.spark.streaming.kafka010.KafkaUtils;
import org.apache.spark.streaming.kafka010.LocationStrategies;

import java.util.*;

public class BitcoinPriceListener {

    public static void main(String[] args) throws Exception {

        // Spark configuration
        SparkConf conf = new SparkConf().setMaster("local[2]").setAppName("BitcoinPriceListener");
        JavaSparkContext jsc = new JavaSparkContext(conf);
        JavaStreamingContext ssc = new JavaStreamingContext(jsc, Durations.seconds(5));

        // Kafka parameters
        Map<String, Object> kafkaParams = new HashMap<>();
        kafkaParams.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        kafkaParams.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        kafkaParams.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        kafkaParams.put(ConsumerConfig.GROUP_ID_CONFIG, "bitcoin-price-consumer-group");
        kafkaParams.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "latest");
        kafkaParams.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);

        // Kafka topics to subscribe
        Collection<String> topics = Arrays.asList("bitcoin-price");

        // Create direct Kafka stream using new API
        JavaInputDStream<ConsumerRecord<String, String>> stream =
                KafkaUtils.createDirectStream(
                        ssc,
                        LocationStrategies.PreferConsistent(),
                        ConsumerStrategies.Subscribe(topics, kafkaParams)
                );

        // Process each RDD from the stream
        stream.foreachRDD(rdd -> {

            // Deserialize JSON string to BitcoinPrice object
            JavaRDD<BitcoinPrice> priceRDD = rdd.map(record -> new Gson().fromJson(record.value(), BitcoinPrice.class));

            // Process each BitcoinPrice entry
            priceRDD.foreach(price -> {
                System.out.println("Received BitcoinPrice: " + price);
                try {
                    BitcoinPriceHbaseTable.populateData(price); // Replace with your HBase table insert method
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
        });

        // Start the streaming context
        ssc.start();
        ssc.awaitTermination();
    }
}
