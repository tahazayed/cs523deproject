package cs523.bitcoinprice.consumer;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import kafka.serializer.StringDecoder;

//import org.apache.hadoop.conf.Configuration;
//import org.apache.hadoop.hbase.HBaseConfiguration;
//import org.apache.spark.streaming.kafka010.*;
//import org.apache.hadoop.hbase.TableName;
//import org.apache.hadoop.hbase.client.Admin;
//import org.apache.hadoop.hbase.client.Connection;
//import org.apache.hadoop.hbase.client.ConnectionFactory;
//import org.apache.hadoop.hbase.client.Put;
//import org.apache.hadoop.hbase.client.Table;
//import org.apache.hadoop.hbase.util.Bytes;
//import org.apache.kafka.common.serialization.StringDeserializer;
//import org.apache.spark.SparkConf;
//import org.apache.spark.api.java.JavaPairRDD;
//import org.apache.spark.api.java.JavaRDD;
//import org.apache.spark.streaming.Durations;
//import org.apache.spark.streaming.api.java.JavaPairInputDStream;
//import org.apache.spark.streaming.api.java.JavaStreamingContext;
//import org.apache.spark.streaming.kafka.KafkaUtils;
//
//
//
//import scala.Tuple2;
//import scala.Tuple3;
//
//import com.fasterxml.jackson.databind.JsonNode;
//import com.fasterxml.jackson.databind.ObjectMapper;

public class BitcoinPriceStream {
//    public static void main(String[] args) throws InterruptedException {
//        // Spark configuration
//        SparkConf conf = new SparkConf().setAppName("BitcoinPriceListener").setMaster("local[*]");
//        JavaStreamingContext sc = new JavaStreamingContext(conf, Durations.seconds(5));
//
//        // Kafka parameters
//        Map<String, Object> kafkaParams = new HashMap<>();
//        kafkaParams.put("bootstrap.servers", "localhost:9092");
//        kafkaParams.put("key.deserializer", StringDeserializer.class);
//        kafkaParams.put("value.deserializer", StringDeserializer.class);
//        kafkaParams.put("group.id", "bitcoin-price-consumer-group");
//        kafkaParams.put("auto.offset.reset", "latest");
//        kafkaParams.put("enable.auto.commit", false);
//
//        // Topics
//        Set<String> topics  = new HashSet<>(Arrays.asList("bitcoin-price"));
//        
//        
//        JavaPairInputDStream<String, String> stream = KafkaUtils
//				.createDirectStream(sc, String.class, String.class,
//						StringDecoder.class, StringDecoder.class, kafkaParams,
//						topics);
//
//
//        // Create direct Kafka stream
////        JavaInputDStream<ConsumerRecord<String, String>> stream1 =
////                KafkaUtils.createDirectStream(
////                        sc,
////                        LocationStrategies.PreferConsistent(),
////                        ConsumerStrategies.Subscribe(topics, kafkaParams)
////                );
//
//        // Process the stream using BitcoinPriceListener
//        BitcoinPriceListener.process(stream);
//
//        // Start streaming
//        sc.start();
//        sc.awaitTermination();
//    }
}
