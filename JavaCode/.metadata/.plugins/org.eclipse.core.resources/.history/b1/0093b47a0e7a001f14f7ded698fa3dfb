package cs523.bitcoinprice.consumer;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaInputDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka010.ConsumerStrategies;
import org.apache.spark.streaming.kafka010.DirectKafkaInputDStream;
import org.apache.spark.streaming.kafka010.KafkaUtils;
import org.apache.spark.streaming.kafka010.LocationStrategies;

import scala.Tuple2;

public class BitcoinPriceListener {

    public static void main(String[] args) throws Exception {
        SparkConf conf = new SparkConf().setMaster("local[2]").setAppName("BitcoinPriceListener");

        JavaStreamingContext jssc = new JavaStreamingContext(conf, Durations.seconds(10));

        // Kafka configurations
        Map<String, Object> kafkaParams = new HashMap<>();
        kafkaParams.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        kafkaParams.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        kafkaParams.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        kafkaParams.put(ConsumerConfig.GROUP_ID_CONFIG, "bitcoin-price-group");
        kafkaParams.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "latest");
        kafkaParams.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, true);

        // Topic to listen to
        Collection<String> topics = Arrays.asList("bitcoin-price");

        // Create direct Kafka stream
        JavaInputDStream<ConsumerRecord<String, String>> stream =
                KafkaUtils.createDirectStream(
                        jssc,
                        LocationStrategies.PreferConsistent(),
                        ConsumerStrategies.Subscribe(topics, kafkaParams)
                );

        // Process the records
        JavaPairDStream<String, String> results = stream.mapToPair(record -> new Tuple2<>(record.key(), record.value()));

        // Perform actions on each RDD in the DStream
        results.foreachRDD(new VoidFunction<JavaRDD<Tuple2<String, String>>>() {
            @Override
            public void call(JavaRDD<Tuple2<String, String>> rdd) {
                rdd.foreach(record -> {
                    String key = record._1();
                    String value = record._2();
                    System.out.println("Key: " + key + ", Value: " + value);
                    // Additional processing logic here
                });
            }
        });

        // Start the context
        jssc.start();
        jssc.awaitTermination();
    }
}
